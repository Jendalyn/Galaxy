name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          override: true
          components: rustfmt, clippy
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends unzip libc6 libstdc++6 || { echo "Failed to install unzip, libc6, or libstdc++6"; exit 1; }
      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.1'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup environment
        run: |
          echo "PROTOC=/opt/hostedtoolcache/protoc/25.1/x64/bin/protoc" >> $GITHUB_ENV
      - name: Install proto dependencies
        run: |
          mkdir -p protos/google/api
          mkdir -p protos/google/protobuf
          curl -L -o protos/google/api/annotations.proto https://raw.githubusercontent.com/googleapis/googleapis/master/google/api/annotations.proto || { echo "Failed to download annotations.proto"; exit 1; }
          curl -L -o protos/google/api/http.proto https://raw.githubusercontent.com/googleapis/googleapis/master/google/api/http.proto || { echo "Failed to download http.proto"; exit 1; }
          curl -L -o protos/google/protobuf/descriptor.proto https://raw.githubusercontent.com/protocolbuffers/protobuf/master/src/google/protobuf/descriptor.proto || { echo "Failed to download descriptor.proto"; exit 1; }
          echo "Listing proto files:"
          ls -R protos || { echo "Failed to list protos directory"; exit 1; }
          echo "Checking specific proto files:"
          ls protos/network.proto protos/transaction.proto protos/block.proto protos/storage.proto protos/consensus.proto protos/overlay.proto protos/validation.proto protos/mining.proto protos/auth.proto protos/alert.proto protos/index.proto protos/metrics.proto || { echo "One or more proto files missing"; exit 1; }
          echo "PATH=$PATH"
          echo "PROTOC=$PROTOC"
          ls -l /opt/hostedtoolcache/protoc/25.1/x64/bin/protoc || { echo "protoc binary not found"; exit 1; }
          file /opt/hostedtoolcache/protoc/25.1/x64/bin/protoc || { echo "Failed to verify protoc binary"; exit 1; }
          which protoc || { echo "protoc not in PATH"; exit 1; }
          protoc --version || { echo "protoc not accessible"; exit 1; }
          $PROTOC --proto_path=protos --include_imports --descriptor_set_out=/tmp/block.desc protos/block.proto || { echo "protoc test compilation failed"; exit 1; }
      - name: Check runner environment
        run: |
          whoami
          df -h
          echo "Runner OS: $RUNNER_OS"
      - name: Check formatting
        run: |
          export PROTOC=/opt/hostedtoolcache/protoc/25.1/x64/bin/protoc
          cargo fmt --all -- --check
        env:
          PROTOC: /opt/hostedtoolcache/protoc/25.1/x64/bin/protoc
      - name: Run clippy
        run: |
          export PROTOC=/opt/hostedtoolcache/protoc/25.1/x64/bin/protoc
          cargo clippy --all-targets --all-features -- -D warnings
        env:
          PROTOC: /opt/hostedtoolcache/protoc/25.1/x64/bin/protoc
      - name: Build
        run: |
          export PROTOC=/opt/hostedtoolcache/protoc/25.1/x64/bin/protoc
          cargo build --release
        env:
          PROTOC: /opt/hostedtoolcache/protoc/25.1/x64/bin/protoc
      - name: Test
        run: |
          export PROTOC=/opt/hostedtoolcache/protoc/25.1/x64/bin/protoc
          cargo test --all
        env:
          PROTOC: /opt/hostedtoolcache/protoc/25.1/x64/bin/protoc
