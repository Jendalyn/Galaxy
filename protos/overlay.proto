// protos/overlay.proto
syntax = "proto3";

package overlay;

import "google/api/annotations.proto";
import "metrics.proto";

service Overlay {
    rpc CreateOverlay (CreateOverlayRequest) returns (CreateOverlayResponse);
    rpc SubmitOverlayTransaction (SubmitOverlayTxRequest) returns (SubmitOverlayTxResponse);
    rpc GetOverlayBlock (GetOverlayBlockRequest) returns (GetOverlayBlockResponse) {
        option (google.api.http) = {
            post: "/v1/overlay/block"
            body: "*"
        };
    }
    rpc BatchSubmitOverlayTransaction (BatchSubmitOverlayTxRequest) returns (BatchSubmitOverlayTxResponse);
    rpc StreamOverlayTransactions (stream StreamOverlayTxRequest) returns (stream StreamOverlayTxResponse);
    rpc IndexOverlayTransaction (IndexOverlayTransactionRequest) returns (IndexOverlayTransactionResponse);
    rpc QueryOverlayBlock (QueryOverlayBlockRequest) returns (QueryOverlayBlockResponse);
    rpc ManageOverlayConsensus (ManageOverlayConsensusRequest) returns (ManageOverlayConsensusResponse);
    rpc GetMetrics (metrics.GetMetricsRequest) returns (metrics.GetMetricsResponse);
}

message CreateOverlayRequest {
    string overlay_id = 1; // Unique identifier for the overlay
}

message CreateOverlayResponse {
    bool success = 1;
    string error = 2; // Error message if creation fails
}

message SubmitOverlayTxRequest {
    string overlay_id = 1; // Overlay identifier
    string tx_hex = 2; // Hex-encoded overlay transaction
}

message SubmitOverlayTxResponse {
    bool success = 1;
    string error = 2; // Error message if submission fails
}

message GetOverlayBlockRequest {
    string overlay_id = 1; // Overlay identifier
    uint32 block_height = 2; // Block height in the overlay
}

message GetOverlayBlockResponse {
    string block_hex = 1; // Hex-encoded overlay block
    string error = 2; // Error message if retrieval fails
}

message BatchSubmitOverlayTxRequest {
    string overlay_id = 1; // Overlay identifier
    repeated string tx_hexes = 2; // List of hex-encoded overlay transactions
}

message BatchSubmitOverlayTxResponse {
    repeated SubmitOverlayTxResponse results = 1; // Results for each transaction
}

message StreamOverlayTxRequest {
    string overlay_id = 1; // Overlay identifier
    string tx_hex = 2; // Hex-encoded transaction to monitor
}

message StreamOverlayTxResponse {
    bool success = 1;
    string tx_hex = 2; // Hex-encoded transaction
    string error = 3; // Error message if submission fails
}

message IndexOverlayTransactionRequest {
    string overlay_id = 1; // Overlay identifier
    string tx_hex = 2; // Hex-encoded transaction to index
}

message IndexOverlayTransactionResponse {
    bool success = 1;
    string error = 2; // Error message if indexing fails
}

message QueryOverlayBlockRequest {
    string overlay_id = 1; // Overlay identifier
    uint32 block_height = 2; // Block height to query
}

message QueryOverlayBlockResponse {
    string block_hex = 1; // Hex-encoded overlay block
    string error = 2; // Error message if query fails
}

message ManageOverlayConsensusRequest {
    string overlay_id = 1; // Overlay identifier
    string rule_name = 2; // Name of the consensus rule (e.g., "restrict_op_return")
    bool enable = 3; // Enable or disable the rule
}

message ManageOverlayConsensusResponse {
    bool success = 1;
    string error = 2; // Error message if rule update fails
}
